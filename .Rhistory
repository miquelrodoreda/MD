column_pairs <- column_pairs[column_pairs[, 1] != column_pairs[, 2], ]
for (i in seq_len(nrow(column_pairs))) {
col1 <- column_pairs[i, 1]
col2 <- column_pairs[i, 2]
if (col1 > col2) next
# Scatterplots for numeric vs numeric
if (col1 %in% num_cols && col2 %in% num_cols) {
file_name <- paste0("bivariant/scatterplots/scatterplot_", col1, "_", col2, ".png")
png(file_name, width = 800, height = 600)
pairs.panels(dd[, c(col1, col2)], method = "pearson", hist.col = "lightblue", density = TRUE, ellipses = TRUE)
dev.off()
}
# Boxplots and histograms for numeric vs categorical (in both possible orders)
if ((col1 %in% num_cols && col2 %in% cat_cols) || (col1 %in% cat_cols && col2 %in% num_cols)) {
if (col1 %in% num_cols) {
numeric_col <- col1
categorical_col <- col2
} else {
numeric_col <- col2
categorical_col <- col1
}
valid_data <- dd[!is.na(dd[[col1]]) & !is.na(dd[[col2]]), ]
# Boxplot
boxplot_file <- paste0("bivariant/boxplots/boxplot_", col1, "_", col2, ".png")
png(boxplot_file, width = 800, height = 600)
if (col1 %in% num_cols) {
boxplot(valid_data[[col1]] ~ valid_data[[col2]], main = paste("Boxplot of", col1, "by", col2), xlab = col2, ylab = col1, col = "lightblue", border = "black")
} else {
boxplot(valid_data[[col2]] ~ valid_data[[col1]], main = paste("Boxplot of", col2, "by", col1), xlab = col1, ylab = col2, col = "lightblue", border = "black")
}
dev.off()
# Histogram
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
# Get the unique categories in col2
categories <- unique(valid_data[[categorical_col]])
num_categories <- length(unique(valid_data[[categorical_col]]))
category_colors <- colorRampPalette(brewer.pal(12, "Set3"))(num_categories)
ggplot(valid_data, aes(x = .data[[numeric_col]], fill = .data[[categorical_col]], y = after_stat(density))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20, color = "black") +
labs(title = paste("Overlayed Histogram of", numeric_col, "grouped by", categorical_col),
x = numeric_col, y = "Density", fill = categorical_col) +
theme_minimal()
# Save the plot
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
ggsave(hist_file, width = 8, height = 6, dpi = 300)
}
# Barplots and mosaic plots for categorical vs categorical
if (col1 %in% cat_cols && col2 %in% cat_cols) {
contingency_table <- table(dd[[col1]], dd[[col2]])
df_table <- as.data.frame(as.table(contingency_table))
p <- ggplot(df_table, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Contingency Table Heatmap", x = col1, y = col2, fill = "Count") +
theme_minimal()
# Save as PNG
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
ggsave(contingency_table_file, plot = p, width = 8, height = 6, dpi = 300)
# Barplot
barplot_file <- paste0("bivariant/barplots/barplot_", col1, "_", col2, ".png")
png(barplot_file, width = 800, height = 600)
barplot(contingency_table, beside = TRUE, col = rainbow(nrow(contingency_table)), main = paste("Barplot of", col1, "vs", col2), xlab = col1, ylab = "Count", legend = TRUE)
dev.off()
# Mosaicplot
mosaicplot_file <- paste0("bivariant/mosaicplots/mosaicplot_", col1, "_", col2, ".png")
png(mosaicplot_file, width = 800, height = 600)
mosaicplot(contingency_table, main = paste("Mosaic Plot of", col1, "vs", col2), color = TRUE, shade = TRUE, las = 2)
dev.off()
}
}
print("Done")
View(dd)
num_cols <- names(dd)[sapply(dd, is.numeric)]
cat_cols <- names(dd)[sapply(dd, function(col) is.character(col) || is.factor(col))]
# Iterate over all pairs of columns
column_pairs <- expand.grid(names(dd), names(dd), stringsAsFactors = FALSE)
column_pairs <- column_pairs[column_pairs[, 1] != column_pairs[, 2], ]
View(column_pairs)
View(filtered_data)
View(dd)
for (i in seq_len(nrow(column_pairs))) {
col1 <- column_pairs[i, 1]
col2 <- column_pairs[i, 2]
if (col1 > col2) next
# Scatterplots for numeric vs numeric
if (col1 %in% num_cols && col2 %in% num_cols) {
file_name <- paste0("bivariant/scatterplots/scatterplot_", col1, "_", col2, ".png")
png(file_name, width = 800, height = 600)
pairs.panels(dd[, c(col1, col2)], method = "pearson", hist.col = "lightblue", density = TRUE, ellipses = TRUE)
dev.off()
}
# Boxplots and histograms for numeric vs categorical (in both possible orders)
if ((col1 %in% num_cols && col2 %in% cat_cols) || (col1 %in% cat_cols && col2 %in% num_cols)) {
if (col1 %in% num_cols) {
numeric_col <- col1
categorical_col <- col2
} else {
numeric_col <- col2
categorical_col <- col1
}
valid_data <- dd[!is.na(dd[[col1]]) & !is.na(dd[[col2]]), ]
# Boxplot
boxplot_file <- paste0("bivariant/boxplots/boxplot_", col1, "_", col2, ".png")
png(boxplot_file, width = 800, height = 600)
if (col1 %in% num_cols) {
boxplot(valid_data[[col1]] ~ valid_data[[col2]], main = paste("Boxplot of", col1, "by", col2), xlab = col2, ylab = col1, col = "lightblue", border = "black")
} else {
boxplot(valid_data[[col2]] ~ valid_data[[col1]], main = paste("Boxplot of", col2, "by", col1), xlab = col1, ylab = col2, col = "lightblue", border = "black")
}
dev.off()
# Histogram
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
# Get the unique categories in col2
categories <- unique(valid_data[[categorical_col]])
num_categories <- length(unique(valid_data[[categorical_col]]))
category_colors <- colorRampPalette(brewer.pal(12, "Set3"))(num_categories)
ggplot(valid_data, aes(x = .data[[numeric_col]], fill = .data[[categorical_col]], y = after_stat(density))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20, color = "black") +
labs(title = paste("Overlayed Histogram of", numeric_col, "grouped by", categorical_col),
x = numeric_col, y = "Density", fill = categorical_col) +
theme_minimal()
# Save the plot
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
ggsave(hist_file, width = 8, height = 6, dpi = 300)
}
# Barplots and mosaic plots for categorical vs categorical
if (col1 %in% cat_cols && col2 %in% cat_cols) {
contingency_table <- table(dd[[col1]], dd[[col2]])
df_table <- as.data.frame(as.table(contingency_table))
p <- ggplot(df_table, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Contingency Table Heatmap", x = col1, y = col2, fill = "Count") +
theme_minimal()
# Save as PNG
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
ggsave(contingency_table_file, plot = p, width = 8, height = 6, dpi = 300)
# Barplot
barplot_file <- paste0("bivariant/barplots/barplot_", col1, "_", col2, ".png")
png(barplot_file, width = 800, height = 600)
barplot(contingency_table, beside = TRUE, col = rainbow(nrow(contingency_table)), main = paste("Barplot of", col1, "vs", col2), xlab = col1, ylab = "Count", legend = TRUE)
dev.off()
# Mosaicplot
mosaicplot_file <- paste0("bivariant/mosaicplots/mosaicplot_", col1, "_", col2, ".png")
png(mosaicplot_file, width = 800, height = 600)
mosaicplot(contingency_table, main = paste("Mosaic Plot of", col1, "vs", col2), color = TRUE, shade = TRUE, las = 2)
dev.off()
}
}
print("Done")
View(column_pairs)
filename <- "dataset/preprocessing2.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
filename <- "dataset/filtered_data.csv"
filename <- "dataset/filtered_data.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
# Libraries
#install.packages("psych")
library(psych)
library(RColorBrewer)
library(ggplot2)
#install.packages("ggplot2")
# Work directory
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
# Read dataset
filename <- "dataset/filtered_data.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
output_dirs <- c("bivariant/scatterplots", "bivariant/boxplots", "bivariant/histograms", "bivariant/barplots", "bivariant/mosaicplots", "bivariant/contingency_table")
for (dir in output_dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
num_cols <- names(dd)[sapply(dd, is.numeric)]
cat_cols <- names(dd)[sapply(dd, function(col) is.character(col) || is.factor(col))]
# Iterate over all pairs of columns
column_pairs <- expand.grid(names(dd), names(dd), stringsAsFactors = FALSE)
column_pairs <- column_pairs[column_pairs[, 1] != column_pairs[, 2], ]
for (i in seq_len(nrow(column_pairs))) {
col1 <- column_pairs[i, 1]
col2 <- column_pairs[i, 2]
if (col1 > col2) next
# Scatterplots for numeric vs numeric
if (col1 %in% num_cols && col2 %in% num_cols) {
file_name <- paste0("bivariant/scatterplots/scatterplot_", col1, "_", col2, ".png")
png(file_name, width = 800, height = 600)
pairs.panels(dd[, c(col1, col2)], method = "pearson", hist.col = "lightblue", density = TRUE, ellipses = TRUE)
dev.off()
}
# Boxplots and histograms for numeric vs categorical (in both possible orders)
if ((col1 %in% num_cols && col2 %in% cat_cols) || (col1 %in% cat_cols && col2 %in% num_cols)) {
if (col1 %in% num_cols) {
numeric_col <- col1
categorical_col <- col2
} else {
numeric_col <- col2
categorical_col <- col1
}
valid_data <- dd[!is.na(dd[[col1]]) & !is.na(dd[[col2]]), ]
# Boxplot
boxplot_file <- paste0("bivariant/boxplots/boxplot_", col1, "_", col2, ".png")
png(boxplot_file, width = 800, height = 600)
if (col1 %in% num_cols) {
boxplot(valid_data[[col1]] ~ valid_data[[col2]], main = paste("Boxplot of", col1, "by", col2), xlab = col2, ylab = col1, col = "lightblue", border = "black")
} else {
boxplot(valid_data[[col2]] ~ valid_data[[col1]], main = paste("Boxplot of", col2, "by", col1), xlab = col1, ylab = col2, col = "lightblue", border = "black")
}
dev.off()
# Histogram
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
# Get the unique categories in col2
categories <- unique(valid_data[[categorical_col]])
num_categories <- length(unique(valid_data[[categorical_col]]))
category_colors <- colorRampPalette(brewer.pal(12, "Set3"))(num_categories)
ggplot(valid_data, aes(x = .data[[numeric_col]], fill = .data[[categorical_col]], y = after_stat(density))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20, color = "black") +
labs(title = paste("Overlayed Histogram of", numeric_col, "grouped by", categorical_col),
x = numeric_col, y = "Density", fill = categorical_col) +
theme_minimal()
# Save the plot
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
ggsave(hist_file, width = 8, height = 6, dpi = 300)
}
# Barplots and mosaic plots for categorical vs categorical
if (col1 %in% cat_cols && col2 %in% cat_cols) {
contingency_table <- table(dd[[col1]], dd[[col2]])
df_table <- as.data.frame(as.table(contingency_table))
p <- ggplot(df_table, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Contingency Table Heatmap", x = col1, y = col2, fill = "Count") +
theme_minimal()
# Save as PNG
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
ggsave(contingency_table_file, plot = p, width = 8, height = 6, dpi = 300)
# Barplot
barplot_file <- paste0("bivariant/barplots/barplot_", col1, "_", col2, ".png")
png(barplot_file, width = 800, height = 600)
barplot(contingency_table, beside = TRUE, col = rainbow(nrow(contingency_table)), main = paste("Barplot of", col1, "vs", col2), xlab = col1, ylab = "Count", legend = TRUE)
dev.off()
# Mosaicplot
mosaicplot_file <- paste0("bivariant/mosaicplots/mosaicplot_", col1, "_", col2, ".png")
png(mosaicplot_file, width = 800, height = 600)
mosaicplot(contingency_table, main = paste("Mosaic Plot of", col1, "vs", col2), color = TRUE, shade = TRUE, las = 2)
dev.off()
}
}
print("Done")
View(column_pairs)
# Libraries
#install.packages("psych")
library(psych)
library(RColorBrewer)
library(ggplot2)
# Work directory
setwd("/home/gerard/Desktop/MD/MD/")
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
output_dirs <- c("bivariant/scatterplots", "bivariant/boxplots", "bivariant/histograms", "bivariant/barplots", "bivariant/mosaicplots", "bivariant/contingency_table")
for (dir in output_dirs) {
if (!dir.exists(dir)) {
dir.create(dir, recursive = TRUE)
}
}
num_cols <- names(dd)[sapply(dd, is.numeric)]
cat_cols <- names(dd)[sapply(dd, function(col) is.character(col) || is.factor(col))]
# Iterate over all pairs of columns
column_pairs <- expand.grid(names(dd), names(dd), stringsAsFactors = FALSE)
column_pairs <- column_pairs[column_pairs[, 1] != column_pairs[, 2], ]
for (i in seq_len(nrow(column_pairs))) {
col1 <- column_pairs[i, 1]
col2 <- column_pairs[i, 2]
if (col1 > col2) next
# Scatterplots for numeric vs numeric
if (col1 %in% num_cols && col2 %in% num_cols) {
file_name <- paste0("bivariant/scatterplots/scatterplot_", col1, "_", col2, ".png")
png(file_name, width = 800, height = 600)
pairs.panels(dd[, c(col1, col2)], method = "pearson", hist.col = "lightblue", density = TRUE, ellipses = TRUE)
dev.off()
}
# Boxplots and histograms for numeric vs categorical (in both possible orders)
if ((col1 %in% num_cols && col2 %in% cat_cols) || (col1 %in% cat_cols && col2 %in% num_cols)) {
if (col1 %in% num_cols) {
numeric_col <- col1
categorical_col <- col2
} else {
numeric_col <- col2
categorical_col <- col1
}
valid_data <- dd[!is.na(dd[[col1]]) & !is.na(dd[[col2]]), ]
# Boxplot
boxplot_file <- paste0("bivariant/boxplots/boxplot_", col1, "_", col2, ".png")
png(boxplot_file, width = 800, height = 600)
if (col1 %in% num_cols) {
boxplot(valid_data[[col1]] ~ valid_data[[col2]], main = paste("Boxplot of", col1, "by", col2), xlab = col2, ylab = col1, col = "lightblue", border = "black")
} else {
boxplot(valid_data[[col2]] ~ valid_data[[col1]], main = paste("Boxplot of", col2, "by", col1), xlab = col1, ylab = col2, col = "lightblue", border = "black")
}
dev.off()
# Histogram
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
# Get the unique categories in col2
categories <- unique(valid_data[[categorical_col]])
num_categories <- length(unique(valid_data[[categorical_col]]))
category_colors <- colorRampPalette(brewer.pal(12, "Set3"))(num_categories)
ggplot(valid_data, aes(x = .data[[numeric_col]], fill = .data[[categorical_col]], y = after_stat(density))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20, color = "black") +
labs(title = paste("Overlayed Histogram of", numeric_col, "grouped by", categorical_col),
x = numeric_col, y = "Density", fill = categorical_col) +
theme_minimal()
# Save the plot
hist_file <- paste0("bivariant/histograms/histogram_", col1, "_", col2, ".png")
ggsave(hist_file, width = 8, height = 6, dpi = 300)
}
# Barplots and mosaic plots for categorical vs categorical
if (col1 %in% cat_cols && col2 %in% cat_cols) {
contingency_table <- table(dd[[col1]], dd[[col2]])
df_table <- as.data.frame(as.table(contingency_table))
p <- ggplot(df_table, aes(x = Var2, y = Var1, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Contingency Table Heatmap", x = col1, y = col2, fill = "Count") +
theme_minimal()
# Save as PNG
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
ggsave(contingency_table_file, plot = p, width = 8, height = 6, dpi = 300)
# Barplot
barplot_file <- paste0("bivariant/barplots/barplot_", col1, "_", col2, ".png")
png(barplot_file, width = 800, height = 600)
barplot(contingency_table, beside = TRUE, col = rainbow(nrow(contingency_table)), main = paste("Barplot of", col1, "vs", col2), xlab = col1, ylab = "Count", legend = TRUE)
dev.off()
# Mosaicplot
mosaicplot_file <- paste0("bivariant/mosaicplots/mosaicplot_", col1, "_", col2, ".png")
png(mosaicplot_file, width = 800, height = 600)
mosaicplot(contingency_table, main = paste("Mosaic Plot of", col1, "vs", col2), color = TRUE, shade = TRUE, las = 2)
dev.off()
}
}
print("Done")
View(column_pairs)
View(column_pairs)
View(dd)
View(df_table)
View(filtered_data)
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
# Libraries
#install.packages("psych")
library(psych)
library(RColorBrewer)
library(ggplot2)
# Work directory
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
# Read dataset
filename <- "dataset/preprocessing.csv"
dd <- read.csv(filename)
library(psych)
library(RColorBrewer)
library(ggplot2)
# Definir directorio de trabajo
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
# Leer dataset
filename <- "dataset/preprocessing.csv"
dd <- read.csv(filename)
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
library(psych)
library(RColorBrewer)
library(ggplot2)
# Leer dataset
filename <- "dataset/preprocessing.csv"
dd <- read.csv(filename)
filename <- "dataset/preprocessing.csv"
dd <- read.csv(filename)
# Leer dataset
filename <- "dataset/preprocessing2.csv"
dd <- read.csv(filename)
library(psych)
library(RColorBrewer)
library(ggplot2)
# Definir directorio de trabajo
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
# Leer dataset
filename <- "dataset/preprocessing2.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
# Leer dataset
filename <- "dataset/preprocessing2.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
View(column_pairs)
View(column_pairs)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
View(dd)
View(column_pairs)
View(dd)
View(dd)
# Crear directorios de salida si no existen
output_dirs <- c("bivariant/scatterplots", "bivariant/boxplots", "bivariant/histograms", "bivariant/barplots", "bivariant/mosaicplots", "bivariant/contingency_table")
lapply(output_dirs, function(dir) if (!dir.exists(dir)) dir.create(dir, recursive = TRUE))
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
View(dd)
filename <- "dataset/filtered_data.csv"
file.exists(filename)
de <- read.csv(filename)
dd <- de[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
barplot(table(dd$original_location))
# Leer dataset
filename <- "dataset/preprocessing2.csv"
dd <- read.csv(filename)
dd <- dd[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
dd <- de[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
# Crear directorios de salida si no existen
output_dirs <- c("bivariant/scatterplots", "bivariant/boxplots", "bivariant/histograms", "bivariant/barplots", "bivariant/mosaicplots", "bivariant/contingency_table")
lapply(output_dirs, function(dir) if (!dir.exists(dir)) dir.create(dir, recursive = TRUE))
# Identificar columnas numéricas y categóricas
num_cols <- names(dd)[sapply(dd, is.numeric)]
cat_cols <- names(dd)[sapply(dd, function(col) is.character(dd[[col]]) || is.factor(dd[[col]]))]
column_pairs <- expand.grid(names(dd), names(dd), stringsAsFactors = FALSE)
column_pairs <- column_pairs[column_pairs$Var1 != column_pairs$Var2, ]
column_pairs <- column_pairs[!duplicated(t(apply(column_pairs, 1, sort))), ]
library(psych)
library(RColorBrewer)
library(ggplot2)
# Definir directorio de trabajo
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
# Leer dataset
filename <- "dataset/preprocessing2.csv"
de <- read.csv(filename)
dd <- de[, c("price_level", "vegan_options", "awards", "gluten_free", "cuisines", "original_location", "open_days_per_week", "avg_rating", "total_reviews_count", "food", "service", "atmosphere", "excellent", "meals")]
for (i in seq_len(nrow(column_pairs))) {
col1 <- column_pairs[i, 1]
col2 <- column_pairs[i, 2]
valid_data <- na.omit(dd[, c(col1, col2)])
# Scatterplots (num vs num)
if (col1 %in% num_cols && col2 %in% num_cols) {
file_name <- paste0("bivariant/scatterplots/scatterplot_", col1, "_", col2, ".png")
png(file_name, width = 800, height = 600)
pairs.panels(valid_data, method = "pearson", hist.col = "lightblue", density = TRUE, ellipses = TRUE)
dev.off()
}
# Boxplots e histogramas (num vs cat)
if ((col1 %in% num_cols && col2 %in% cat_cols) || (col1 %in% cat_cols && col2 %in% num_cols)) {
if (col1 %in% num_cols) {
numeric_col <- col1
categorical_col <- col2
} else {
numeric_col <- col2
categorical_col <- col1
}
# Boxplot
boxplot_file <- paste0("bivariant/boxplots/boxplot_", numeric_col, "_", categorical_col, ".png")
p <- ggplot(valid_data, aes(x = factor(.data[[categorical_col]]), y = .data[[numeric_col]])) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Boxplot de", numeric_col, "según", categorical_col), x = categorical_col, y = numeric_col) +
theme_minimal()
ggsave(boxplot_file, plot = p, width = 8, height = 6, dpi = 300)
# Histograma
hist_file <- paste0("bivariant/histograms/histogram_", numeric_col, "_", categorical_col, ".png")
p <- ggplot(valid_data, aes(x = .data[[numeric_col]], fill = factor(.data[[categorical_col]]))) +
geom_histogram(position = "identity", alpha = 0.5, bins = 20, color = "black") +
labs(title = paste("Histograma de", numeric_col, "por", categorical_col), x = numeric_col, y = "Frecuencia", fill = categorical_col) +
theme_minimal()
ggsave(hist_file, plot = p, width = 8, height = 6, dpi = 300)
}
# Barplots y mosaicplots (cat vs cat)
if (col1 %in% cat_cols && col2 %in% cat_cols) {
contingency_table <- table(valid_data[[col1]], valid_data[[col2]])
df_table <- as.data.frame(as.table(contingency_table))
# Heatmap de tabla de contingencia
contingency_table_file <- paste0("bivariant/contingency_table/contingency_table_", col1, "_", col2, ".png")
p <- ggplot(df_table, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = paste("Mapa de calor de la tabla de contingencia de", col1, "y", col2), x = col1, y = col2, fill = "Frecuencia") +
theme_minimal()
ggsave(contingency_table_file, plot = p, width = 8, height = 6, dpi = 300)
# Barplot
barplot_file <- paste0("bivariant/barplots/barplot_", col1, "_", col2, ".png")
p <- ggplot(df_table, aes(x = Var1, y = Freq, fill = Var2)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = paste("Barplot de", col1, "vs", col2), x = col1, y = "Frecuencia", fill = col2) +
theme_minimal()
ggsave(barplot_file, plot = p, width = 8, height = 6, dpi = 300)
# Mosaicplot
mosaicplot_file <- paste0("bivariant/mosaicplots/mosaicplot_", col1, "_", col2, ".png")
png(mosaicplot_file, width = 800, height = 600)
mosaicplot(contingency_table, main = paste("Mosaic Plot de", col1, "vs", col2), color = TRUE, las = 2)
dev.off()
}
}
print("Análisis bivariado completado.")
View(column_pairs)
View(dd)
View(column_pairs)
View(df_table)
# install.packages("RColorBrewer")
library(RColorBrewer)
library(dplyr)
#install.packages("dplyr")
#install.packages("stringi")
library(stringr)
#install.packages("VIM")
library(VIM)
library(stringi)
setwd("C:\Users\alejf\Desktop\UNI_END\MD\MD")
setwd("C:/Users/alejf/Desktop/UNI_END/MD/MD")
filename <- "filtered_data.csv"
file.exists(filename)
dd <- read.csv(filename)
View(dd)
